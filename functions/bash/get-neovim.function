function get-neovim (){
    paru -S --needed \
        neovim-git neovim-symlinks \
        xsel xclip nodejs-neovim \
        python-neovim-git ruby-neovim \
        vim-dein-git vim-m3u
    mkdir -p $HOME/.config/nvim
    cat <<- '____INIT0' >$HOME/.config/nvim/init.vim
if &compatible
  set nocompatible
endif
" Add the dein installation directory into runtimepath
set runtimepath+=~/.cache/dein/repos/github.com/Shougo/dein.vim

if dein#load_state('~/.cache/dein')
  call dein#begin('~/.cache/dein')

  call dein#add('~/.cache/dein/repos/github.com/Shougo/dein.vim')
  call dein#add('Shougo/deoplete.nvim')
  if !has('nvim')
    call dein#add('roxma/nvim-yarp')
    call dein#add('roxma/vim-hug-neovim-rpc')
  endif

  call dein#end()
  call dein#save_state()
endif

filetype plugin indent on
syntax enable

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" If you want to install not installed plugins on startup.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if dein#check_install()
  call dein#install()
endif

____INIT0

nvim

    cat <<- '____COLOR' >$HOME/.config/nvim/homemade.vim
" Vim color file
" Maintainer: toshi75
" Last Change: 2020-03-23
"
" I referred to wombat256grf.vim
"----------------------------------------------------------
" Vim color file
" Maintainer: Roman 'gryf' Dobosz
" Last Change: 2017-05-30
"
" wombat256grf.vim - a modified version of Wombat by Lars Nielsen (at al) that
" also works on xterms with 88 or 256 colors. Instead of hard coding colors
" for the terminal, algorithm for approximating the GUI colors with the xterm
" palette was used. Approximation function was taken from desert256.vim by
" Henry So Jr.
"----------------------------------------------------------

set background=dark

if version > 580
	hi clear
	if exists("syntax_on")
		syntax reset
	endif
endif

let g:colors_name = "homemade"

if !has("gui_running") && &t_Co != 88 && &t_Co != 256
	finish
endif

" functions {{{
" returns an approximate grey index for the given grey level
fun <SID>grey_number(x)
	if &t_Co == 88
		if a:x < 23
			return 0
		elseif a:x < 69
			return 1
		elseif a:x < 103
			return 2
		elseif a:x < 127
			return 3
		elseif a:x < 150
			return 4
		elseif a:x < 173
			return 5
		elseif a:x < 196
			return 6
		elseif a:x < 219
			return 7
		elseif a:x < 243
			return 8
		else
			return 9
		endif
	else
		if a:x < 14
			return 0
		else
			let l:n = (a:x - 8) / 10
			let l:m = (a:x - 8) % 10
			if l:m < 5
				return l:n
			else
				return l:n + 1
			endif
		endif
	endif
endfun

" returns the actual grey level represented by the grey index
fun <SID>grey_level(n)
	if &t_Co == 88
		if a:n == 0
			return 0
		elseif a:n == 1
			return 46
		elseif a:n == 2
			return 92
		elseif a:n == 3
			return 115
		elseif a:n == 4
			return 139
		elseif a:n == 5
			return 162
		elseif a:n == 6
			return 185
		elseif a:n == 7
			return 208
		elseif a:n == 8
			return 231
		else
			return 255
		endif
	else
		if a:n == 0
			return 0
		else
			return 8 + (a:n * 10)
		endif
	endif
endfun

" returns the palette index for the given grey index
fun <SID>grey_color(n)
	if &t_Co == 88
		if a:n == 0
			return 16
		elseif a:n == 9
			return 79
		else
			return 79 + a:n
		endif
	else
		if a:n == 0
			return 16
		elseif a:n == 25
			return 231
		else
			return 231 + a:n
		endif
	endif
endfun

" returns an approximate color index for the given color level
fun <SID>rgb_number(x)
	if &t_Co == 88
		if a:x < 69
			return 0
		elseif a:x < 172
			return 1
		elseif a:x < 230
			return 2
		else
			return 3
		endif
	else
		if a:x < 75
			return 0
		else
			let l:n = (a:x - 55) / 40
			let l:m = (a:x - 55) % 40
			if l:m < 20
				return l:n
			else
				return l:n + 1
			endif
		endif
	endif
endfun

" returns the actual color level for the given color index
fun <SID>rgb_level(n)
	if &t_Co == 88
		if a:n == 0
			return 0
		elseif a:n == 1
			return 139
		elseif a:n == 2
			return 205
		else
			return 255
		endif
	else
		if a:n == 0
			return 0
		else
			return 55 + (a:n * 40)
		endif
	endif
endfun

" returns the palette index for the given R/G/B color indices
fun <SID>rgb_color(x, y, z)
	if &t_Co == 88
		return 16 + (a:x * 16) + (a:y * 4) + a:z
	else
		return 16 + (a:x * 36) + (a:y * 6) + a:z
	endif
endfun

" returns the palette index to approximate the given R/G/B color levels
fun <SID>color(r, g, b)
	" get the closest grey
	let l:gx = <SID>grey_number(a:r)
	let l:gy = <SID>grey_number(a:g)
	let l:gz = <SID>grey_number(a:b)

	" get the closest color
	let l:x = <SID>rgb_number(a:r)
	let l:y = <SID>rgb_number(a:g)
	let l:z = <SID>rgb_number(a:b)

	if l:gx == l:gy && l:gy == l:gz
		" there are two possibilities
		let l:dgr = <SID>grey_level(l:gx) - a:r
		let l:dgg = <SID>grey_level(l:gy) - a:g
		let l:dgb = <SID>grey_level(l:gz) - a:b
		let l:dgrey = (l:dgr * l:dgr) + (l:dgg * l:dgg) + (l:dgb * l:dgb)
		let l:dr = <SID>rgb_level(l:gx) - a:r
		let l:dg = <SID>rgb_level(l:gy) - a:g
		let l:db = <SID>rgb_level(l:gz) - a:b
		let l:drgb = (l:dr * l:dr) + (l:dg * l:dg) + (l:db * l:db)
		if l:dgrey < l:drgb
			" use the grey
			return <SID>grey_color(l:gx)
		else
			" use the color
			return <SID>rgb_color(l:x, l:y, l:z)
		endif
	else
		" only one possibility
		return <SID>rgb_color(l:x, l:y, l:z)
	endif
endfun

" returns the palette index to approximate the 'rrggbb' hex string
fun <SID>rgb(rgb)
	let l:r = ("0x" . strpart(a:rgb, 0, 2)) + 0
	let l:g = ("0x" . strpart(a:rgb, 2, 2)) + 0
	let l:b = ("0x" . strpart(a:rgb, 4, 2)) + 0
	return <SID>color(l:r, l:g, l:b)
endfun

" sets the highlighting for the given group
fun <SID>X(group, fg, bg, attr)
	if a:fg != ""
		exec "hi ".a:group." guifg=#".a:fg." ctermfg=".<SID>rgb(a:fg)
	endif
	if a:bg != ""
		exec "hi ".a:group." guibg=#".a:bg." ctermbg=".<SID>rgb(a:bg)
	endif
	if a:attr != ""
		if a:attr == 'italic'
			exec "hi ".a:group." gui=".a:attr." cterm=none"
		else
			exec "hi ".a:group." gui=".a:attr." cterm=".a:attr
		endif
	endif
endfun

" same as above, but makes it for the spell-like things
fun <SID>Y(group, bg)
	if ! has('gui_running')
		if a:bg != ""
			exec "hi ".a:group." ctermbg=".<SID>rgb(a:bg)
		endif
	else
		if a:bg != ""
			exec "hi ".a:group." guisp=#".a:bg." gui=undercurl"
		endif
	endif
endfun
" }}}

" italic only in gui and only where font is not fixed-misc!

if has("gui_running") && &guifont !~ "Fixed"
	"let s:italic = "italic"
	let s:italic = "none"
else
	let s:italic = "none"
endif


" X(fg, bg, attr)
" non-syntax items, interface, etc
call <SID>X("Normal",		"ffff99",	"002b36",	"none")
call <SID>X("NonText",		"ffff00",	"",			"none")
call <SID>X("Cursor",		"222222",	"ffff00",	"none")

"highlight CursorLine cterm=underline ctermfg=NONE ctermbg=NONE
if version > 700
	call <SID>X("CursorLine",	"none",	"none",	"underline")
	hi link CursorColumn CursorLine
	if version > 703
		call <SID>X("ColorColumn", "", "2d2d2d", "")
	endif
endif

call <SID>X("Search",		"444444",	"ffab4b",	"")
call <SID>X("MatchParen",	"ffff00",	"857b6f",	"bold")
call <SID>X("SpecialKey",	"6c6c6c",	"2d2d2d",	"none")
call <SID>X("Visual",		"",	"26512D",	"none")
call <SID>X("LineNr",		"ffff00",	"121212",	"none")
call <SID>X("SignColumn",   "",	"121212",	"none")
call <SID>X("Folded",		"a0a8b0",	"404048",	"none")
call <SID>X("Title",		"f6f3e8",	"",			"bold")
call <SID>X("VertSplit",	"444444",	"444444",	"none")
call <SID>X("StatusLine",	"f6f3e8",	"444444",	"none")
call <SID>X("StatusLineNC",	"857b6f",	"444444",	"none")
call <SID>X("Pmenu",		"f6f3e8",	"444444",	"")
call <SID>X("PmenuSel",		"121212",	"01ffff",	"")
call <SID>X("WarningMsg",	"ff99ff	",	"",			"")

hi! link VisualNOS	Visual
hi! link FoldColumn	Folded
hi! link TabLineSel StatusLine
hi! link TabLineFill StatusLineNC
hi! link TabLine StatusLineNC
call <SID>X("TabLineSel", "f6f3e8", "", "none")

" syntax highlighting
call <SID>X("Comment",		"00ffff",	"",			"none")

call <SID>X("Constant",		"ff99ff	",	"",			"none")
call <SID>X("String",		"00ff00",	"",			"none")
"Character
"Number
"Boolean
"Float

call <SID>X("Identifier",	"00ffff",	"",			"none")
call <SID>X("Function",		"ff4f00",	"",			"none")

call <SID>X("Statement",	"ffff00",	"",			"bold")
"Conditional "Repeat
"Label
"Operator
call <SID>X("Keyword",		"ffff00",	"",			"none")
"Exception

"call <SID>X("PreProc",		"ff4f00",	"",			"none")
"                        　^文字色^ $() など
call <SID>X("PreProc",		"ff4f00",	"",			"none")
"Include
"Define
"Macro
"PreCondit

call <SID>X("Type",			"00ffff",	"",			"none")
"StorageClass
"Structure
"Typedef

"call <SID>X("Special",		"ffdd00",	"",			"none")
"                      ^ffdd00: global foreground color^
call <SID>X("Special",		"ffff99",	"",			"none")
"SpecialChar
"Tag
"Delimiter
"SpecialComment
"Debug

"Underlined

"Ignore

call <SID>X("Error", "bbbbbb", "aa0000", "none")

call <SID>X("Todo", "666666", "aaaa00", "none")

" Diff
call <SID>X("DiffAdd", "", "ff4f00", "bold")
call <SID>X("DiffText", "", "a0b8a0", "bold")
call <SID>X("DiffDelete", "00ffff", "101010", "bold")
call <SID>X("DiffChange", "", "00ff00", "bold")

" Spellchek
if  version > 700
	" spell, make it underline, and less bright colors. only for terminal
	call <SID>Y("SpellBad", "881000")
	call <SID>Y("SpellCap", "003288")
	call <SID>Y("SpellRare", "73009F")
	call <SID>Y("SpellLocal", "A0CC00")
endif

" Plugins:
" ShowMarks
call <SID>X("ShowMarksHLl", "ab8042", "002b36", "bold")
call <SID>X("ShowMarksHLu", "aaab42", "002b36", "bold")
call <SID>X("ShowMarksHLo", "42ab47", "002b36", "bold")
call <SID>X("ShowMarksHLm", "aaab42", "002b36", "bold")

" Syntastic
call <SID>Y("SyntasticError ", "ab8042")
call <SID>Y("SyntasticWarning", "ff4f00")
call <SID>Y("SyntasticStyleError", "ab8042")
call <SID>Y("SyntasticStyleWarning", "ff4f00")
call <SID>X("SyntasticErrorSign", "", "ab8042", "")
call <SID>X("SyntasticWarningSign", "", "ff4f00", "")
call <SID>X("SyntasticStyleErrorSign", "", "ab8042", "")
call <SID>X("SyntasticStyleWarningSign", "", "ff4f00", "")

" delete functions {{{
delf <SID>Y
delf <SID>X
delf <SID>rgb
delf <SID>color
delf <SID>rgb_color
delf <SID>rgb_level
delf <SID>rgb_number
delf <SID>grey_color
delf <SID>grey_level
delf <SID>grey_number
" }}}

" vim:set ts=4 sw=4 noet fdm=marker:

____COLOR


    cat <<- '____INIT' >$HOME/.config/nvim/init.vim
"filetype plugin indent off
"ファイルの種類毎に設定ファイルを記述できるんですが、
"それを利用する際はinit.vimの最初に
"filetype plugin indent off を記述しておく必要があります。
"また、これを設定した場合、末尾に
"filetype plugin indent on
"と追記する必要があり、最終行にこれを記述しています。

"################################################
"https://vim-jp.org/vimdoc-ja/
"################################################

" ターミナル：ターミナルで256色表示を使う
set t_Co=256


"vim アドオンのロード
"vim のためにインストールしたプラグインやシンタックス定義などの
"アドオンを使いたい場合、rtp を使って vim のデフォルトの
"ランタイムパスを neovim に追加することができます。
"nvim の中から以下を実行するか、あるいは neovim の
"設定ファイルに追加してください
"set rtp^=/usr/share/nvim/runtime/
"set runtimepath+=/usr/share/nvim/runtime/
set runtimepath+=$XDG_CONFIG_HOME/nvim/

" setting
" シンタックスハイライトの有効化
" コマンド ":syntax enable" は現在の色設定を変更しない。
" そのため、このコマンドを使用する前後に
" コマンド ":highlight" で好みの色を設定することができる。
" 現在の設定を破棄して、デフォルトの色を設定させたい場合は
" 次のコマンドを使用する ":syntax on"

"syntax enable
syntax on

"NonText: eol, extends, precedes
"SpecialKey: nbsp, tab, trail
"  hi NonText              ctermfg=3 ctermbg=0
"  hi SpecialKey           ctermfg=3 ctermbg=0

"== colorscheme =====================================
set termguicolors     " enable true colors support
set background=dark



"拡張子".vim"は不要
colorscheme homemade
"colorscheme argonaut
"colorscheme homemade_on_brogrammer
"colorscheme industry seoul seti Monokai


"let ayucolor="mirage" " for mirage version of theme
"colorscheme ayu


"====================================================

" ノーマルモードでフォーカスが外れると自動で上書き保存
autocmd FocusLost * silent! wa

" □とか○の文字があってもカーソル位置がずれないようにする
if exists('&ambiwidth')
  set ambiwidth=double
endif


" 行の折返し有無
"set wrap  "有
set nowrap "無

"文字コードをUFT-8に設定
set fenc=utf-8

"Help表示は日本語優先
set helplang=ja,en

"改行コード指定
"開いたファイルの行末に指定したものがあった時、
"それを改行コードとして使用するようになります。
"unixはLF、dosはCRLF、macはCRに対応します。
"なお、いずれも見つからなかった場合は一番左のもの
"が採用されます。
set fileformats=unix,dos,mac

":qしたときにバッファを消さずに隠して保持
set hidden

" バックアップファイルを作らない
set nobackup
"バックアップファイルを生成する
"set backup
"set backupdir=/tmp/vimback
"set backupext=.bak

" スワップファイルを作らない
set noswapfile
" 編集中のファイルが変更されたら自動で読み直す
set autoread
" バッファが編集中でもその他のファイルを開けるように
set hidden
" 入力中のコマンドをステータスに表示する
set showcmd
"画面を縦分割する際に右に開く
set splitright
"yank した文字列をクリップボードにコピー
"set clipboard=unnamed
set clipboard+=unnamedplus

"マウスでクリックしたところにカーソルを飛ばしたり、ホイールでスクロール
set mouse=a

"スクロールの余裕を確保する
set scrolloff=5 sidescrolloff=8

inoremap <silent> zzz <ESC>
inoremap <silent> jj <ESC>
inoremap <silent> <C-Left> <ESC>
inoremap <silent> <C-Right> <ESC>
inoremap <silent> <C-z> <ESC>

inoremap <silent> zz <ESC> :<C-u>w<CR>i
inoremap <silent> ZZZ <ESC> ZZ


"nnoremap <silent>sss   :<C-u>w<CR>
"nnoremap <Space>q   :<C-u>q<CR>
nnoremap <silent>qqq  :<C-u>q!<CR>
nnoremap <silent>zz   :<C-u>w<CR>


"-- 挿入モード---[Ctrl]+zでアンドゥ  ---------------------------
inoremap <C-z> <Esc>ui
"-- 挿入モード---[Ctrl]+yでリドゥ ----------------------------
inoremap <C-y> <Esc><C-r><Insert>


"-- tmux上でもインサートモード時のカーソルの形状を変化させる ----------------
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

"== 見た目系 ============================
"-- 行番号を表示 ---------------------
set number
"-- 編集中のファイル名を表示 -------------------
set title
"-- ステータス行にルーラーを表示 ----------------
set ruler

"-- カレント行ハイライトON ------------------------
set cursorline
"-- 現在の列を強調表示（縦）----------------------------------
set cursorcolumn
"-- アンダーラインを引く(color terminal) -----------------------
highlight CursorLine cterm=underline ctermfg=NONE ctermbg=NONE
"-- アンダーラインを引く(gui) -------------------------
highlight CursorLine gui=underline guifg=NONE guibg=NONE
"-- 行末の1文字先までカーソルを移動できるように ---------------
set virtualedit=onemore
"-- インデントはスマートインデント -------------------
set smartindent
"XX ビープ音を可視化 XXXXXXXXXXXXXXXXXXXX
    " set visualbell
"-- エラーメッセージの表示時にビープを鳴らさない ---------------
set noerrorbells
"XX 括弧入力時の対応する括弧を表示 XXXXXXXXXXXXXXXXXXX
    "set showmatch
"-- ステータスラインを常に表示 --------------------
set laststatus=2
"-- コマンドラインの補完 ---------------------------
set wildmode=list:longest
"-- 折り返し時に表示行単位での移動できるようにする -----------------
nnoremap j gj
nnoremap k gk

"-- ターミナルモードはbash -------------------------
set sh=bash
"XX ESCでターミナルモードからノーマルモードへ XXXXXXXXXXXXXXXXXX
    "tnoremap <silent> <ESC> <C-\><C-n>

"XX 新しいタブでターミナルを起動 XXXXXXXXXXXXXXXXXXXXXXXXX
    "nnoremap @t :tabe<CR>:terminal<CR>
"XX Ctrl + q でターミナルを終了 XXXXXXXXXXXXXXXXXXXXXXXX
    "tnoremap <C-q> <C-\><C-n>:q<CR>


"== Tab系 ==================================================
"-- 不可視文字を可視化(タブが「▸-」と表示される)等 -----------------
"↙ ⤆ ⤦ ⤶ ⥒  ← « ‹ ↲|
set list
set listchars=tab:⥂\-,trail:\-,eol:↲,extends:❯,precedes:❮,nbsp:⥊
"set listchars=tab:⥂-,trail:-,eol:«,extends:❯,precedes:❮,nbsp:⥊
"set listchars=tab:\▸\-,trail:*,eol:↲,extends:❯,precedes:❮
"XXX       set listchars=tab:\▸\-,trail:*


"-- Tab文字を半角スペースにする ------------------------
set expandtab
"-- 行頭以外のTab文字の表示幅（スペースいくつ分） ---------------
set tabstop=4
"-- 行頭でのTab文字の表示幅 ---------------------
set shiftwidth=4

"== 検索系 =====================================
"-- 正規表現の扱い --------------------------------------
set magic
"-- 検索文字列が小文字の場合は大文字小文字を区別なく検索する -----
set ignorecase
"-- 検索文字列に大文字が含まれている場合は区別して検索する
set smartcase
"-- 検索文字列入力時に順次対象文字列にヒットさせる
set incsearch
"-- 検索時に最後まで行ったら最初に戻る ------------------
set wrapscan
"-- 検索語をハイライト表示 -------------------------------
set hlsearch
"-- ESC連打でハイライト解除 ------------------------------
nmap <Esc><Esc> :nohlsearch<CR><Esc>

"-- 検索語が画面の真ん中に来るようにする -------------------
nmap n nzz
nmap N Nzz
nmap * *zz
nmap # #zz
nmap g* g*zz
nmap g# g#zz

"== Start vim-startify: No Cow =====================
set shortmess=I
"== End vim-startify ===============================

" 起動時から有効
"let g:indent_guides_enable_on_vim_startup = 1

" 色指定
"let g:indent_guides_auto_colors = 0
"autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=green ctermbg=4
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=red   ctermbg=3
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=black   ctermbg=0

"可視化領域のサイズを変更したい場合、値は0からshiftwidth値の間で設定する。
"デフォルト値は0だが、その場合はshiftwidth値と同じになる。
"let g:indent_guides_guide_size = 1

"=== END vim-indent-guides ===============================


"-------------------------------------------------------------------------------
"" nerdcommenter
"-------------------------------------------------------------------------------
" コメントした後に挿入するスペースの数
let NERDSpaceDelims = 1
" キーマップの変更。<Leader>=\+cでコメント化と解除を行う。
" コメントされていれば、コメントを外し、コメントされてなければコメント化する。
vmap ./ <Plug>NERDCommenterToggle


" Create default mappings
let g:NERDCreateDefaultMappings = 1

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1





"########################################
" Plugin key-mappings.
" Note: It must be "imap" and "smap".
" It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".
" It uses <Plug> mappings.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

" MakefileではインデントにTABを使う
let _curfile=expand("%:r")
if _curfile == 'Makefile'
  set noexpandtab
endif

let _curfile=expand("%:r")
if _curfile == 'makefile'
  set noexpandtab
endif

"########################################

"== Start vim-startify: No Cow =====================
let g:startify_custom_header = []
"== End vim-startify ===============================


"== Start dein =====================================
if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath+=$HOME/.cache/dein/repos/github.com/Shougo/dein.vim

" Required:
if dein#load_state('$HOME/.cache/dein')
  call dein#begin('$HOME/.cache/dein')

  " Let dein manage dein
  " Required:
  call dein#add('$HOME/.cache/dein/repos/github.com/Shougo/dein.vim')

  " Add or remove your plugins here:
"  call dein#add('ycm-core/YouCompleteMe')
  call dein#add('Shougo/neosnippet.vim')
  call dein#add('Shougo/neosnippet-snippets')

  """"""""""""""""""""""""""""""""""""""""""""
  call dein#add('Shougo/deoplete.nvim')
  if !has('nvim')
    call dein#add('roxma/nvim-yarp')
    call dein#add('roxma/vim-hug-neovim-rpc')
  endif
  let g:deoplete#enable_at_startup = 1
  """"""""""""""""""""""""""""""""""""""""""""

  call dein#add('qwelyt/TrippingRobot')
  call dein#add('editorconfig/editorconfig-vim')
  call dein#add('dm1try/golden_size')
  call dein#add('junegunn/fzf.vim')
  call dein#add('junegunn/fzf')
  call dein#add('akiyosi/gonvim-fuzzy')
  call dein#add('preservim/nerdtree')
 "call dein#add('scrooloose/nerdcommenter')
  call dein#add('tpope/vim-commentary')
  call dein#add('vim-airline/vim-airline')
  call dein#add('vim-airline/vim-airline-themes')
  call dein#add('sheerun/vim-polyglot')
  call dein#add('bronson/vim-trailing-whitespace')
  call dein#add('vim-jp/vimdoc-ja')
  call dein#add('dense-analysis/ale')
  call dein#add('ryanoasis/vim-devicons')
  call dein#add('Yggdroot/indentLine')
  call dein#add('scrooloose/nerdtree')
  call dein#add('tpope/vim-surround')
  call dein#add('mhinz/vim-startify')
  call dein#add('vim-perl/vim-perl')
  call dein#add('dag/vim-fish')
 "call dein#add('EdenEast/nightfox.nvim')
""""call dein#add(’neoclide/coc.nvim’, {‘merged’:0, ‘rev’: ‘release’})
""""call dein#add('wsdjeg/dein-ui.vim')
"call dein#add('bash-support.vim')
  if !has('nvim')
    call dein#add('roxma/nvim-yarp')
    call dein#add('roxma/vim-hug-neovim-rpc')
  endif
  " You can specify revision/branch/tag.
  call dein#add('Shougo/deol.nvim', { 'rev': '01203d4c9' })

  " Required:
  call dein#end()
  call dein#save_state()
endif

" Required:
filetype plugin indent on
syntax enable

" If you want to install not installed plugins on startup.
if dein#check_install()
  call dein#install()
endif

____INIT
    return 0
}

